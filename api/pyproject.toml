[tool.poetry]
name = "Outdated"
version = "1.0.0"
description = "Shows all added projects, and their packages, also indicates when a package is no longer supported."
authors = ["Adfinis AG"]
license = "GPL-3.0-or-later"
readme = "../README.md"

[tool.poetry.dependencies]
python = "^3.12"
django = "^4.2.6"
django-environ = "^0.9.0"
psycopg2-binary = "^2.9.9"
djangorestframework = "^3.14.0"
djangorestframework-jsonapi = "^6.1.0"
django-filter = "^23.3"
gunicorn = "^21.2.0"
semver = "^3.0.0"
mozilla-django-oidc = "^3.0.0"
pyaml = "^23.9.7"


[tool.poetry.group.dev.dependencies]
black = "23.10.1"
pytest-django = "4.6.0"
pytest = "7.4.3"
pytest-factoryboy = "2.6.0"
pytest-cov = "^4.0.0"
pytest-mock = "^3.11.1"
pytest-vcr = "^1.0.2"
pdbpp = "^0.10.3"
requests-mock = "^1.10.0"
django-extensions = "^3.2.3"
ipdb = "^0.13.13"
ruff = "^0.1.3"


[tool.ruff]
exclude = ["migrations"]
line-length = 88
select = ["ALL"]

ignore = [
  "A003",   # flake8-builtins - Class attribute {name} is shadowing a Python builtin
  "ANN101", # Missing type annotation for `self` in method  - Annotating self shouldn't be necessary

  # Don't enforce the existance of docstrings

  "D100",   # Missing docstring in public module
  "D101",   # Missing docstring in public class
  "D102",   # Missing docstring in public method
  "D103",   # Missing docstring in public function
  "D104",   # Missing docstring in public package
  "D105",   # Missing docstring in magic method
  "D106",   # Missing docstring in public nested class
  "D107",   # Missing docstring in __init__
  "D203",   # 1 blank line required before class docstring
  "D212",   # Multi-line docstring summary should start at the first line

  "DJ001",  # flake8-django - Avoid using null=True on string-based fields
  "E501",   # Line length - managed by black
  "RUF012", # Mutable class attributes should be annotated with typing.ClassVar
  "S101",    # Use of assert detected - Required for pytest to be usable
  "PLR2004", # Magic value used in comparison, consider replacing {value} with a constant variable - allow using set values
  "ARG001",  # Unused function argument: {name} - allow using fixtures that aren't used in the actual test e.g. db
  "TRY003",  # Avoid specifying long messages outside the exception class
  "EM",      # Exception must not use a string literal, f-string or .format assign to variable first
  "S603",    # `subprocess` call: check for execution of untrusted input
  "FBT",     # Booleans in function calls/defenitions
]

[tool.ruff.flake8-annotations]
ignore-fully-untyped = true

[tool.ruff.flake8-unused-arguments]
ignore-variadic-names = true


[tool.ruff.extend-per-file-ignores]
"factories.py" = ["S311"] # Standard pseudo-random generators are not suitable for cryptographic purposes - factories are only used in tests 

[tool.ruff.isort]
known-first-party = ["outdated"]
combine-as-imports = true

[tool.ruff.flake8-pytest-style]
fixture-parentheses = false
parametrize-names-type = "csv"

[tool.ruff.mccabe]
max-complexity = 6

[tool.ruff.pylint]
max-args = 10

[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "outdated.settings"
addopts = "--create-db --vcr-record=once"

[tool.coverage.run]
source = ["."]

[tool.coverage.report]
fail_under = 100
exclude_lines = [
  "pragma: no cover",
  "pragma: todo cover",
  "def __str__",
  "def __unicode__",
  "def __repr__",
]
omit = [
  "*/migrations/*",
  "*/apps.py",
  "manage.py",
  "outdated/wsgi.py",
  "pdbrc.py",
]
show_missing = true

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
