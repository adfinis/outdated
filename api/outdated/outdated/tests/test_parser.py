from __future__ import annotations

import pytest

from outdated.outdated.parser import LockfileParser
from outdated.outdated.tracking import Tracker

POETRY_LOCK_CONTENT = """
# This file is automatically @generated by Poetry 1.6.1 and should not be changed by hand.
[[package]]
name = "django"
version = "4.2.6"

[[package]]
name = "djangorestframework"
version = "3.14.0"
"""

POETRY_LOCK_EXPECTED = [
    "django 4.2.6",
    "djangorestframework 3.14.0",
]

# the dependencies are kept to test the regex
YARN_LOCK_CONTENT = """
# THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
# yarn lockfile v1


ember-source@^5.4.0:
  version "5.4.0"
  dependencies:
    "@babel/helper-module-imports" "^7.16.7"
    "@ember/edition-utils" "^1.2.0"
    "@glimmer/component" "^1.1.2"
    "@simple-dom/interface" "^1.4.0"
    babel-plugin-debug-macros "^0.3.4"
    ember-router-generator "^2.0.0"
    router_js "^8.0.3"
    semver "^7.5.2"
    silent-error "^1.1.1"

ember-data@^5.3.0:
  version "5.3.0"
  dependencies:
    "@ember-data/adapter" "5.3.0"
    "@embroider/macros" "^1.13.1"
    ember-inflector "^4.0.2"
    webpack "^5.88.2"

"""


YARN_LOCK_EXPECTED = [
    "ember-source 5.4.0",
    "ember-data 5.3.0",
]

# the contents of the package do not matter as we get all required information from the key
PNPM_LOCK_CONTENT = """
lockfileVersion: '6.0'

settings:
  autoInstallPeers: true
  excludeLinksFromLockfile: false


devDependencies:
  ember-cli:
    specifier: ^4.12.0
    version: 4.12.2
  ember-source:
    specifier: ^4.12.0
    version: 4.12.3(@babel/core@7.23.2)(@glimmer/component@1.1.2)(webpack@5.89.0)

packages:

  /ember-cli@4.12.2:
    dev: true

  /ember-source@4.12.3(@babel/core@7.23.2)(@glimmer/component@1.1.2)(webpack@5.89.0):
    dev: true
"""

PNPM_LOCK_EXPECTED = [
    "ember-source 4.12.3",
    "ember-cli 4.12.2",
]


@pytest.mark.parametrize(
    "lockfile,content,expected",
    [
        ("yarn.lock", YARN_LOCK_CONTENT, YARN_LOCK_EXPECTED),
        ("pnpm-lock.yaml", PNPM_LOCK_CONTENT, PNPM_LOCK_EXPECTED),
        ("poetry.lock", POETRY_LOCK_CONTENT, POETRY_LOCK_EXPECTED),
    ],
)
def test_parser(db, tmp_repo_root, project, lockfile, content, expected):
    project_path = tmp_repo_root / project.clone_path
    project_path.mkdir(parents=True, exist_ok=False)

    lockfile_path = project_path / lockfile

    lockfile_path.write_text(content)

    tracker = Tracker(project)
    lockfiles = tracker.lockfiles

    assert len(lockfiles) == 1
    assert lockfiles[0].name == lockfile

    results = LockfileParser(lockfiles).parse()

    assert len(results) == len(expected)

    for result in results:
        assert str(result) in expected
